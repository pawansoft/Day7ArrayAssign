1. Write a program in the following steps
a. Generate 10 Random 3 digit number
b. Store this random numbers into array
c. Then find the 2nd largest and second smallest value without shorting the array


#!/bin/bash

read -p "Enter the limit : " lim
fs=1000;
ss=1000;
fl=0;
sl=0;
for(( i = 1; i <= $lim; i++ ))
do
arr[i]=$((RANDOM%1000));
done
for n in "${arr[@]}"
do
if [ $n -lt $fs ]
then
ss=$fs
fs=$n
elif [[ $n -lt $ss && $n != $fs ]]
then
ss=$n;
fi
if [ $n -gt $fl ]
then
sl=$fl
fl=$n
elif [[ $n -gt $ss && $n != $fs ]]
then
sl=$n
fi
done
if [ $ss -eq 1000 ]
then
echo "There is no second smallest Value Found"
else
echo "Second Smallest Value is: $ss"
fi
if [ $sl -eq 0 ]
then
echo "There is no second Largest Value Found"
else
echo "Second Largest Value is: $sl"
fi





echo ${arr[*]}


Output:
Enter the limit : 10
Second Smallest Value is: 137
Second Largest Value is: 793
625 627 893 415 604 748 784 121 137 793















































2. Extend the above program to short the array and then find the 2nd largest and
 second smallest element


#!/bin/bash

read -p "Enter the limit : " lim
fs=1000;
ss=1000;
fl=0;
sl=0;
for(( i = 1; i <= $lim; i++ ))
do
arr[i]=$((RANDOM%1000));
done


arr2=($(echo ${arr[*]} | tr " " "\n" | sort -n))
echo "Shorted Array is :"
echo ${arr2[*]}

echo "Second Smallest Value is: ${arr2[1]}"
echo "Second Largest Value is : ${arr2[`expr $lim-2` ]}"

echo "Actual Array is :"
echo ${arr[*]} | sort -n



Output:
Enter the limit : 10
Shorted Array is :
2 17 115 327 376 463 479 549 713 847
Second Smallest Value is: 17
Second Largest Value is : 713
Actual Array is :
376 463 327 17 847 549 713 479 115 2


















3. Extend the prime factorization program to store all the prime factors of a number n into
 array and finally display the output.

#!/bin/bash

read -p "Enter the number" num
isPrime=1;
for (( i=2; `expr i*i`<=num; i++ ))
do
if [ `expr $num % $i` -eq 0 ]
then
isPrime=1;
for (( j=2; j<=`expr $i/2`; j++ ))
do
if [ `expr $i % $j` -eq 0 ]
then
isPrime=0
fi
done
if [ $isPrime -eq 1 ]
then

arr[i]=$i
fi
fi
done
echo ${arr[*]}

Output:
Enter the number2020
2 5
























4. Write a program to show the sum of three Integer add to ZERO

#!/bin/bash

read -p "Enter the size of an array" size
found=false;
for (( count =0; count < $size; count++ ))
do
read -p "Enter the arr[$count] : " value
arr[count]=$value
done

echo "array [ ${arr[*]} ]"

for (( i = 0; i < `expr $size - 2`; i++ ))
do

for (( j = `expr $i + 1`; j < `expr $size-1`; j++ ))
do

for (( k = `expr $j + 1`; k < $size; k++ ))
do
num1=${arr[i]}
num2=${arr[j]}
num3=${arr[k]}

sum=`expr $num1 + $num2 + $num3`
if [ $sum -eq 0 ]
then

echo " $num1 : $num2 : $num3"
found=true;
fi
done
done
done
if [ $found == "false" ]
then
echo "Not exist"
fi


Output:
Enter the size of an array5
Enter the arr[0] : 0
Enter the arr[1] : -1
Enter the arr[2] : 2
Enter the arr[3] : -3
Enter the arr[4] : 1
array [ 0 -1 2 -3 1 ]
0 : -1 : 1
2 : -3 : 1


5. Take a range from 0 to 100, find the digits that are repeated twice line 33, 77, etc and 
the store them in array



#!/bin/bash

for ((counter =0; counter <= 100; counter++ ))
do
if [[ `expr $counter % 11` -eq 0 && $counter -ne 0 ]]
then
arr[counter]=$counter
fi
done
echo "Repeated Number: ${arr[*]}"


Output:
	atedVal.sh
Repeated Number: 11 22 33 44 55 66 77 88 99



